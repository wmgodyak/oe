@mixin centerer() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

@mixin transition($time: 0.35s) {
  @include css3-prefix('transition', all $time ease);
}

@mixin clearfix() {
  *zoom: 1;
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin respond-to($name) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $name) {
    // Prints a media query based on the value
    @media only screen and #{inspect(map-get($breakpoints, $name))} {
      @content;
    }
  }
  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin respond-from-to($from, $to){
  @media only screen and (min-width: $from) and (max-width: $to)  {
    @content;
  }
}

@mixin respond-min($min){
  @media only screen and (min-width: $min) {
    @content;
  }
}

@mixin respond-max($max){
  @media only screen and (max-width: $max) {
    @content;
  }
}